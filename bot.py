import config
import core
import telebot
import random
import datetime
import markup
import sys
from telebot import apihelper

if config.PROXY_URL:
    apihelper.proxy = {'https': config.PROXY_URL}

bot = telebot.TeleBot(config.TOKEN, skip_pending=True)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, 'üëãüèª –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.\n –Ø–∫—â–æ –≤ —Ç–µ–±–µ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è - –∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ù–∞–ø–∏—Å–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b> —ñ –Ω–∞—à—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ —Ç–æ–±—ñ –Ω–∞–¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –í—Å—å–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ, @cyberlegions', parse_mode='html', reply_markup=markup.markup_main())


@bot.message_handler(commands=['agent'])
def agent(message):
    user_id = message.from_user.id

    if core.check_agent_status(user_id) == True: 
        bot.send_message(message.chat.id, 'üîë –í–∏ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        take_password_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –í—ñ–¥–ø—Ä–∞–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –∫–ª—é—á –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_password_message, get_password_message)


@bot.message_handler(commands=['admin'])
def admin(message):
    user_id = message.from_user.id

    if str(user_id) == config.ADMIN_ID:
        bot.send_message(message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–¥–º—ñ–Ω', reply_markup=markup.markup_admin())
    else:
        bot.send_message(message.chat.id, 'üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.')


@bot.message_handler(content_types=['text'])
def send_text(message):
    user_id = message.from_user.id 

    if message.text == '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è':
        take_new_request = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç —ñ –Ω–∞—à—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤`—è–∂—É—Ç—å—Å—è.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_new_request, get_new_request)

    elif message.text == '‚úâÔ∏è –ú–æ—ó –∑–∞–ø–∏—Ç–∏':
        markup_and_value = markup.markup_reqs(user_id, 'my_reqs', '1')
        markup_req = markup_and_value[0]
        value = markup_and_value[1]

        if value == 0:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∏, —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤.', reply_markup=markup.markup_main())
        else:
            bot.send_message(message.chat.id, '–í–∞—à—ñ –∑–∞–ø–∏—Ç–∏:', reply_markup=markup_req)
    
    else:
        bot.send_message(message.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', parse_mode='html', reply_markup=markup.markup_main())


def get_password_message(message):
    password = message.text
    user_id = message.from_user.id

    if password == None:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)

    elif password.lower() == '–≤—ñ–¥–º—ñ–Ω–∞':
        bot.send_message(message.chat.id, '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    elif core.valid_password(password) == True:
        core.delete_password(password)
        core.add_agent(user_id)

        bot.send_message(message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html', reply_markup=markup.markup_main())
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–Ω–µ–ª—å —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)


def get_agent_id_message(message):
    agent_id = message.text

    if agent_id == None:
        take_agent_id_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

    elif agent_id.lower() == '–≤—ñ–¥–º—ñ–Ω–∞':
        bot.send_message(message.chat.id, '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    else:
        core.add_agent(agent_id)
        bot.send_message(message.chat.id, '‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π.', reply_markup=markup.markup_main())
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ:', reply_markup=markup.markup_admin())


def get_new_request(message):
    request = message.text
    user_id = message.from_user.id
    check_file = core.get_file(message)

    #–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        request = check_file['text']

        if str(request) == 'None':
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç —â–µ —Ä–∞–∑, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑–æ–º –∑ —Ñ–∞–π–ª–æ–º.', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        else:
            req_id = core.new_req(user_id, request)
            core.add_file(req_id, file_id, file_name, type)

            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –ø—ñ–¥ ID {req_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ –º–æ–∂–Ω–∞ –Ω–∞–∂–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É <b>–ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ </b>', parse_mode='html', reply_markup=markup.markup_main())        
    
    #–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
    else:
        if request == None:
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–∞–º–∏ —Ç–∏–ø –¥–∞–Ω–∏—Ö –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±–æ—Ç–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ —Ç—ñ–ª—å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö, (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.)', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        elif request.lower() == '–≤—ñ–¥–º—ñ–Ω–∞':
            bot.send_message(message.chat.id, '–í—ñ–¥–º—ñ–Ω–∞.', reply_markup=markup.markup_main())
            return

        else:
            req_id = core.new_req(user_id, request)
            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –ø—ñ–¥ ID {req_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ –º–æ–∂–Ω–∞ –Ω–∞–∂–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É<b>–ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏</b>', parse_mode='html', reply_markup=markup.markup_main())


def get_additional_message(message, req_id, status):
    additional_message = message.text
    check_file = core.get_file(message)
    
    #–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        additional_message = check_file['text']

        core.add_file(req_id, file_id, file_name, type)

    if additional_message == None:
        take_additional_message = bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–∞–º–∏ —Ç–∏–º –¥–∞–Ω–∏—Ö –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±–æ—Ç–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–¥–∏–Ω –∑ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö, (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status)

    elif additional_message.lower() == '–≤—ñ–¥–º—ñ–Ω–∞':
        bot.send_message(message.chat.id, '–í—ñ–¥–º—ñ–Ω–∞.', reply_markup=markup.markup_main())
        return

    else:
        if additional_message != 'None':
            core.add_message(req_id, additional_message, status)

        if check_file != None:
            if additional_message != 'None':
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª —ñ –ø–æ–≤—ñ–¥–æ–ª–º–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ!'
            else:
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!'
        else:
            text = '‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!'
        
        bot.send_message(message.chat.id, text, reply_markup=markup.markup_main())

        if status == 'agent':
            user_id = core.get_user_id_of_req(req_id)
            try:
                if additional_message == 'None':
                    additional_message = ''

                bot.send_message(user_id, f'‚ö†Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à –∑–∞–ø–∏—Ç ID {req_id}!\n\nüßë‚Äçüíª –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n{additional_message}', reply_markup=markup.markup_main())

                if type == 'photo':
                    bot.send_photo(user_id, photo=file_id, reply_markup=markup.markup_main())
                elif type == 'document':
                    bot.send_document(user_id, data=file_id, reply_markup=markup.markup_main())
                elif type == 'video':
                    bot.send_video(user_id, data=file_id, reply_markup=markup.markup_main())
                elif type == 'audio':
                    bot.send_audio(user_id, audio=file_id, reply_markup=markup.markup_main())
                elif type == 'voice':
                    bot.send_voice(user_id, voice=file_id, reply_markup=markup.markup_main())
                else:
                    bot.send_message(user_id, additional_message, reply_markup=markup.markup_main())
            except:
                pass
        

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.message.chat.id

    if call.message:
        if ('my_reqs:' in call.data) or ('waiting_reqs:' in call.data) or ('answered_reqs:' in call.data) or ('confirm_reqs:' in call.data):
            """
            –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è:

            ‚úâÔ∏è –ú–æ—ó –∑–∞–ø–∏—Ç–∏
            ‚ùóÔ∏è –ß–µ–∫–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏,
            ‚è≥ –ß–µ–∫–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–ø–∏—Ç–∏ 
            """

            parts = call.data.split(':')
            callback = parts[0]
            number = parts[1]
            markup_and_value = markup.markup_reqs(user_id, callback, number)
            markup_req = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –∑–∞–ø–∏—Ç, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —ñ—Å—Ç–æ—Ä—ñ—é –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è, –∞–±–æ –¥–æ–±–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', reply_markup=markup_req)
            except:
                bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à—ñ –∑–∞–ø–∏—Ç–∏:', reply_markup=markup_req)

            bot.answer_callback_query(call.id)

        #–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
        elif 'open_req:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]

            req_status = core.get_req_status(req_id)
            request_data = core.get_request_data(req_id, callback)
            len_req_data = len(request_data)

            i = 1
            for data in request_data:
                if i == len_req_data:
                    markup_req = markup.markup_request_action(req_id, req_status, callback)
                else:
                    markup_req = None

                bot.send_message(chat_id=call.message.chat.id, text=data, parse_mode='html', reply_markup=markup_req)

                i += 1

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ø–∏—Ç
        elif 'add_message:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            status_user = parts[2]

            take_additional_message = bot.send_message(chat_id=call.message.chat.id, text='–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –í–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –æ–¥–∏–Ω –∑ –≤–∏–¥—ñ–≤–¥–∞–Ω–∏—Ö: (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–ª–º–µ–Ω–Ω—è)', reply_markup=markup.markup_cancel())

            bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status_user)

            bot.answer_callback_query(call.id)

        #–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Ç
        elif 'confirm_req:' in call.data:
            parts = call.data.split(':')
            confirm_status = parts[1]
            req_id = parts[2]

            if core.get_req_status(req_id) == 'confirm':
                bot.send_message(chat_id=call.message.chat.id, text="‚ö†Ô∏è –¶–µ–π –∑–∞–ø–∏—Ç –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π .", reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)

                return
            
            #–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if confirm_status == 'wait':
                bot.send_message(chat_id=call.message.chat.id, text="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É - –Ω–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</b>", parse_mode='html', reply_markup=markup.markup_confirm_req(req_id))
            
            #–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            elif confirm_status == 'true':
                core.confirm_req(req_id)
                
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π.", reply_markup=markup.markup_main())
                except:
                    bot.send_message(chat_id=call.message.chat.id, text="‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π.", reply_markup=markup.markup_main())

                bot.answer_callback_query(call.id)

        #–§–∞–π–ª–∏ –∑–∞–ø–∏—Å—É
        elif 'req_files:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]
            number = parts[3]

            markup_and_value = markup.markup_files(number, req_id, callback)
            markup_files = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ —Ñ–∞–π–ª, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ.', reply_markup=markup_files)
            except:
                bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ —Ñ–∞–π–ª, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ.', reply_markup=markup_files)

            bot.answer_callback_query(call.id)

        #–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª.
        elif 'send_file:' in call.data:
            parts = call.data.split(':')
            id = parts[1]
            type = parts[2]

            file_id = core.get_file_id(id)

            if type == 'photo':
                bot.send_photo(call.message.chat.id, photo=file_id, reply_markup=markup.markup_main())
            elif type == 'document':
                bot.send_document(call.message.chat.id, data=file_id, reply_markup=markup.markup_main())
            elif type == 'video':
                bot.send_video(call.message.chat.id, data=file_id, reply_markup=markup.markup_main())
            elif type == 'audio':
                bot.send_audio(call.message.chat.id, audio=file_id, reply_markup=markup.markup_main())
            elif type == 'voice':
                bot.send_voice(call.message.chat.id, voice=file_id, reply_markup=markup.markup_main())
            
            bot.answer_callback_query(call.id)

        #–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'back_agent':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())
            except:
                bot.send_message(call.message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())

            bot.answer_callback_query(call.id)

        #–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω–∞
        elif call.data == 'back_admin':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–¥–º—ñ–Ω.', parse_mode='html', reply_markup=markup.markup_admin())
            except:
                bot.send_message(call.message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–¥–º—ñ–Ω', parse_mode='html', reply_markup=markup.markup_admin())

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç–∏ –ê–≥–µ–Ω—Ç–∞
        elif call.data == 'add_agent':
            take_agent_id_message = bot.send_message(chat_id=call.message.chat.id, text='–©–æ–± –¥–æ–±–∞–≤–∏—Ç–∏ –ê–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ - –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ ID Telegram.', reply_markup=markup.markup_cancel())
            bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

        #–í—Å—ñ –∞–≥–µ–Ω—Ç–∏
        elif 'all_agents:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_agents(number)
            markup_agents = markup_and_value[0]
            len_agents = markup_and_value[1]

            if len_agents == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ê–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ.', parse_mode='html', reply_markup=markup_agents)
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ê–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ', parse_mode='html', reply_markup=markup_agents)

            bot.answer_callback_query(call.id)

        #–í–∏–¥–∞–ª–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞
        
        elif 'delete_agent:' in call.data:
            agent_id = call.data.split(':')[1]
            core.delete_agent(agent_id)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ê–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ', parse_mode='html', reply_markup=markup.markup_agents('1')[0])
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ', parse_mode='html', reply_markup=markup.markup_agents('1')[0])

            bot.answer_callback_query(call.id)

        #–í—Å—ñ –ø–∞—Ä–æ–ª—ñ
        elif 'all_passwords:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_passwords(number)
            markup_passwords = markup_and_value[0]
            len_passwords = markup_and_value[1]

            if len_passwords == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ', parse_mode='html', reply_markup=markup_passwords)
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ ', parse_mode='html', reply_markup=markup_passwords)

            bot.answer_callback_query(call.id)

        #–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å
        elif 'delete_password:' in call.data:
            password = call.data.split(':')[1]
            core.delete_password(password)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å
        elif call.data == 'generate_passwords':
            #10 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—ñ–≤, 16 - –¥–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
            passwords = core.generate_passwords(10, 16) 
            core.add_passwords(passwords)

            text_passwords = ''
            i = 1
            for password in passwords:
                text_passwords += f'{i}. {password}\n'
                i += 1
            
            bot.send_message(call.message.chat.id, f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {i-1} –ø–∞—Ä–æ–ª—ñ–≤:\n\n{text_passwords}", parse_mode='html', reply_markup=markup.markup_main())
            bot.send_message(call.message.chat.id, '–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞
        elif 'stop_bot:' in call.data:
            status = call.data.split(':')[1]

            #–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è
            if status == 'wait':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞ ?", parse_mode='html', reply_markup=markup.markup_confirm_stop())
                except:
                    bot.send_message(call.message.chat.id, f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())

            #–ü—ñ–¥—Ç–≤–µ—Ä–¥–¥–µ–Ω–Ω—è –ø–æ–ª—É—á–µ–Ω–æ
            elif status == 'confirm':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚úÖ –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ.')
                except:
                    bot.send_message(chat_id=call.message.chat.id, text='‚úÖ –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ.')

                bot.answer_callback_query(call.id)
                bot.stop_polling()
                sys.exit()


if __name__ == "__main__":
    bot.polling(none_stop=True)